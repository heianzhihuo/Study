第15章 动态规划
	
	通常按照如下4步来设计一个动态规划算法：
	1、刻画一个最优解的结构特征
	2、递归的定义最优解的值
	3、计算最优解的值，通常采用自底向上的方法
	4、利用计算出的信息构造出一个最优解

15.1 钢条切割
	问题描述：给定一段长度为n英寸的钢条和一个价格表pi（i=1,2,…，n),求切割钢条方案，是得销售收益rn最大。
	对于rn(n>=1)
	rn = max(pn,r1+rn-1,r2+rn-2,…,rn-1+r1)

	在这个问题中为了求解规模为n的原问题，需要先求解形式完全一样但规模更小的子问题。即当完成首次切割后，将两段钢条看成两个独立的钢条切割问题实例。通关组合两个相关子问题的最优解，并在所有可能的两段切割方案中选取组合收益最大者，构成原问题的最优解。这就是最优子结构的性质。

	钢条切割问题可以通过相似但更为简单递归方法来解决。
	
	CUT-ROD(p,n)
	if n==0
		return 0
	q = -∞
	for i = 1 to n
		q = max(q,p[i]+CUT-ROD(p,n-i))
	return q

	上述算法的效率非常差，原因在于，CUT-ROD反复用相同的参数值对自身进行调用，即它反复求解相同的子问题。

	使用动态规划算法求解最优钢条切割问题
	第一种方法是带备忘的自顶向下法，即带备忘的递归。按递归形式编写过程，但是过程中会保存每个子问题的解。当需要一个子问题的解时，过程首先检查是否已保存过此解。
	第二种方法称为自底向上发，这种方法需要恰当的定义子问题“规模”的概念，是得任何子问题的求解都依赖于“更小的”子问题的求解。因而可以将子问题按规模排序，按由小到大的顺序进行求解。当求解某个问题时，它所依赖的那些更小的子问题都已经求解完毕，结果已经保存。每个子问题只需求解一次，当我们求解它时，它的所有子问题都已求解完成。

15.2 矩阵链乘法
	矩阵链乘法问题：给定n个矩阵的链<A1,A2,…,An>，矩阵Ai的规模为pi-1Xpi(1<=i<=n)，求完全括号化方案，是得计算乘积A1A2…An所需标量乘法次数最少。
	
	计算括号化方案的数量
	所有可能的括号化方案数量是一个卡特兰数，其增长速度为Ω(4^n/n^1.5)。
	
	应用动态规划方法
	
	

15.3 动态规划原理
	
	适合应用动态规划方法求解的最优化问题有两个要素：最优子结构和子问题重叠
	
	最优子结构
	如果一个问题的最优解包含其子问题的最优解，则此问题具有最优子结构的性质。
	具有最优子结构时，也可以考虑贪心算法。

	重叠子问题
	子问题空间必须足够小，即问题的递归算法会反复的求解相同的子问题，而不是一直生成新的子问题。
	与之相对的，适合用分治算法求解的问题通常在每一步都产生全新的子问题。

	重构最优解
	将子问题所做的选择存在一个表中

15.4 最长公共子序列

15.5 最优二叉搜索树
	不同的关键字检索频率不同。在给定单词频率的前提下，组织一棵搜索二叉树，使得所有搜索操作访问的节点总数最少。
	
	