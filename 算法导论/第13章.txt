第13章 红黑树
	
	红黑树是满足下列条件的二叉搜索树：
	1、每个结点是红色的或是黑色的
	2、根结点是黑色的
	3、每个叶结点（NIL）是黑色的
	4、如果一个结点是红色的，则它的两个子结点都是黑色的
	5、对每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点。

	红黑树的时间复杂度
	查找、插入、删除的时间复杂度均为O(lgn),n为数据规模

	红黑树优于二叉搜索树的原因：
	红黑树在二叉搜索树的基础上加入了额外的信息，即用空间换时间，通过一些限定信息来保持树的某些性质，同时在插入和删除过程中对二叉树进行了维护，从而保证树的各个分支均衡生长，使得树高保持在一定范围内。
	在二叉搜索树添加的了一些性质，寻找维护这些性质的方法，最后在计算维护这些性质所需的代价。

	一个有n个结点的红黑树的高度至多为2lg(n+1)。

	查找
	查找算法和二叉搜索树相同

	插入
	将节点插入到树的叶子节点上，但是需要对树进行维护，从而使树保持其特性。维护所用的方法是对树进行旋转、修改节点红黑属性。
	插入的新节点都是红色节点，插入后，通过对父节点、叔节点颜色的不同情况来选择不同的操作。

	删除
	删除一个节点，转换成删除该节点的中序遍历的后继节点，然后调用相应的调整函数，来保持红黑性质。
	调整也是对树进行旋转，通过对被删除节点的颜色及该节点兄弟节点和该兄弟节点的子节点颜色的不同情况来选择不同的操作。



	AVL树
	高度平衡的搜索二叉树