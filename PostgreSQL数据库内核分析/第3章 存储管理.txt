第3章 存储管理


3.1 存储管理体系结构
	内存管理和外存管理
	管理内存外存的交互，对内存进行统筹安排和规划。
	内存管理包括共享内存和进程本地内存的管理。


3.2.6 大数据存储

1 TOAST
	存在称为TOAST表的普通表中
	四种策略
	PLAIN：避免压缩和线外存储
	EXTENDED：允许压缩和线外存储
	EXTERNAL：允许线外存储，但不允许压缩
	MAIN：允许压缩，但不允许线外存储

2 大对象
	将大对象存储在系统表中

3.3 内存管理

3.3.1 内存上下文
	
	1 MemoryContext
	内存上下文组成树形结构，根节点为TopMemoryContext
	先分配节点，再分配内存上下文（内存空间）
	Memory是一个抽象类，可以有多个实现，但是目前只有AllocSetContext一个实现
	
	管理方式：内存片式管理，每次分配内存按需分配2的指数大小字节的内存片，最大为8KB，超过则分配内存块。
	对于空闲内存片，用链表管理

	2 内存上下文初始化
	3 内存上下文中内存分配
	4 内存上下文内存重新分配	碎片重新管理
	5 释放内存上下文

3.3.2 高速缓存
	
	SysCache最近使用系统表，RelCache用于存放最近使用过的表模式，每个PostgreSQL进程都维护自己的SysCache和RelCahce
	
	1 SysCache
	不同系统表之间用链表连接，最近使用的表会被放置在表头
	表的元组用双链表连接，最近使用的元组会被放置在表头
	正元组和负元组

	2 RelCache

	3 Cache同步
	 通过SI Message方式（共享消息队列）在进程间传递消息

3.3.3 缓冲池管理
	
	1 初始化共享缓冲池
	2 共享缓冲池查询
	3 共享缓冲区替换策略
	4 本地缓冲池管理

3.3.4 IPC
	进程间通信
	PostgreSQL中的IPC主要采用共享内存方式来实现。
	
	1 共享内存管理
	在PostgreSQL初始化过程中，系统会分配一块内存区域，它对PostgreSQL系统中的所有后端进程是可见的，该内存区域称为共享内存。
	共享内存机制时利用了操作系统的共享内存的编程技术。

	2 SI Message
	用于不同进程的Cache进行同步操作。
	使用shmInvalBuffer全局变量来记录系统中所发出的所有无效消息以及所有进程处理无效消息的进度，其数据类型为SISeg。
	通过消息队列的方式来保存未处理的消息，当队列空间不够时，需要清理一部分未处理的无效消息。
	
	3 其他

3.4 表操作与元组操作
	
3.4.1 表操作

	1 打开表
	返回表的RelationData结构体，可以根据表的OID或者表名打开，实质都是通过OID打开。
	RelationData是关系描述符，记录该表的全部相关信息。

	2 扫描表
	顺序扫描和索引扫描
	首先将文件块逐一加载到缓存区，然后扫描缓冲区中的元组，找到符合条件的元组
	基本策略和同步扫描

	3 同步扫描
	同时有多个扫描扫描同一个表，但是这些扫描进度不同，此时会是进度慢的扫描与进度快的扫描同步，然后进度慢的扫描会回去重现扫描未扫描的部分。

3.4.2 元组操作
	
	
	
	
	