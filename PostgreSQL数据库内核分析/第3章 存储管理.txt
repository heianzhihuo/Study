第3章 存储管理


3.1 存储管理体系结构
	内存管理和外存管理
	管理内存外存的交互，对内存进行统筹安排和规划。
	内存管理包括共享内存和进程本地内存的管理。


3.2.6 大数据存储

1 TOAST
	存在称为TOAST表的普通表中
	四种策略
	PLAIN：避免压缩和线外存储
	EXTENDED：允许压缩和线外存储
	EXTERNAL：允许线外存储，但不允许压缩
	MAIN：允许压缩，但不允许线外存储

2 大对象
	将大对象存储在系统表中

3.3 内存管理

3.3.1 内存上下文
	
	1 MemoryContext
	内存上下文组成树形结构，根节点为TopMemoryContext
	先分配节点，再分配内存上下文（内存空间）
	Memory是一个抽象类，可以有多个实现，但是目前只有AllocSetContext一个实现
	
	管理方式：内存片式管理，每次分配内存按需分配2的指数大小字节的内存片，最大为8KB，超过则分配内存块。
	对于空闲内存片，用链表管理

	2 内存上下文初始化
	3 内存上下文中内存分配
	4 内存上下文内存重新分配	碎片重新管理
	5 释放内存上下文

3.3.2 高速缓存
	
	SysCache最近使用系统表，RelCache用于存放最近使用过的表模式，每个PostgreSQL进程都维护自己的SysCache和RelCahce
	
	1 SysCache
	不同系统表之间用链表连接，最近使用的表会被放置在表头
	表的元组用双链表连接，最近使用的元组会被放置在表头
	正元组和负元组

	2 RelCache

	3 Cache同步
	 通过SI Message方式（共享消息队列）在进程间传递消息

3.3.3 缓冲池管理
	
	1 初始化共享缓冲池
	2 共享缓冲池查询
	3 共享缓冲区替换策略
	4 本地缓冲池管理

3.3.4 IPC
	进程间通信
	PostgreSQL中的IPC主要采用共享内存方式来实现。
	
	1 共享内存管理
	在PostgreSQL初始化过程中，系统会分配一块内存区域，它对PostgreSQL系统中的所有后端进程是可见的，该内存区域称为共享内存。
	共享内存机制时利用了操作系统的共享内存的编程技术。

	2 SI Message
	用于不同进程的Cache进行同步操作。
	使用shmInvalBuffer全局变量来记录系统中所发出的所有无效消息以及所有进程处理无效消息的进度，其数据类型为SISeg。
	通过消息队列的方式来保存未处理的消息，当队列空间不够时，需要清理一部分未处理的无效消息。
	
	3 其他

3.4 表操作与元组操作
	
3.4.1 表操作

	1 打开表
	返回表的RelationData结构体，可以根据表的OID或者表名打开，实质都是通过OID打开。
	RelationData是关系描述符，记录该表的全部相关信息。

	2 扫描表
	顺序扫描和索引扫描
	首先将文件块逐一加载到缓存区，然后扫描缓冲区中的元组，找到符合条件的元组
	基本策略和同步扫描

	3 同步扫描
	同时有多个扫描扫描同一个表，但是这些扫描进度不同，此时会是进度慢的扫描与进度快的扫描同步，然后进度慢的扫描会回去重现扫描未扫描的部分。

3.4.2 元组操作

	1 插入操作
	首先要调用heap_form_tuple初始化HeapTuple结构，然后调用heap_insert接口函数插入元组
	1）首先调用newoid为要插入的元组分配OID
	2）初始化tup
	3）找到属于该表且空闲空间，将其载入缓冲区来插入tup
	4）调用RelationPutHeapTuple函数将新元组插入选中的缓冲区
	5）向事务日志中写入一条XLog
	6）解锁并释放缓冲区，返回OID

	2 删除元组
	标记删除

	3 更新元组
	实际是删除和插入操作的结合

3.5 VACUUM机制

3.4.1 VACUUM操作
	VACUUM有Lazy VACUUM和Full VACUUM，两者皆会用到的重要函数。
	第一个函数是PageRepairFragmentation，当将一个文件块内无效元组标记为可用之后，该函数将把块内所有的空闲碎片移动到块的空闲区域，从而实现块内碎片的整理。
	第二个函数是heap_page_prune，该函数用于清理单个文件快的HOT链，并进行块内碎片的清理。
	VACUUM操作主要由函数vacuum实现

3.5.3 Lazy VACUUM
	主要由lazy_scan_heap实现，其调用的几个重要函数：
	1）lazy_vacuum_heap:该函数将对无效元组链上的元组按文件块为单位进行逐块清理，清理函数为lazy_vacuum_page，并调用RecordPageWithFreeSpace对文件块的空闲空间值进行更新；
	2）lazy_vacuum_page：
	3）heap_page_prune函数：

3.5.4 Full VACUUM
	除了对文件块进行整理外，还实现了跨块移动元组的操作，其接口函数为full_vacuum_rel。
	fraged_pages链表用于记录具有空闲空间的文件块，用作元组跨块移动的目标块；vacuum_pages链表，用于记录所有需要清理的文件块。
	repair_flag是碎片整理函数
	1）从vacuum_pages上最后一个非空文件块开始向前扫描
	a、如果存在无效数据，需调用vacuum_page函数对文件块进行清理和块内碎片整理
	b、逐个扫描块内元组，并将其向frag_pages链表上的文件块中移动元组，目标块总是在当前块前面。
	c、没有可作为移动的目标文件块时，跳出循环。
	2）调用vacuum_page函数处理vacuum_pages链表上剩余的文件块
	3）对文件进行截断，除去文件尾的空块。

3.6 ResourceOwnew资源跟踪
	记录了大多数事务过程中用到的资源。
	ResourceOwner对象相互之间会构成一个树结构，为了便于管理ResourceOwner树，在内存中保存了三个全局的ResourceOwner结构变量
	CurrentResourceOwner：记录当前使用的ResourceOwner
	CurTransactionResourceOwner：记录当前事务ResourceOwner
	TopTransactionResourceOwner：记录顶层事务的ResourceOwner。
	对每一种资源，都为其定义了三种操作：
	1）在ResourceOwner中分配内存，函数ResourceOwnerEnlargeBuffer
	2）增加资源跟踪，函数ResourceOwnerRememberBuffer
	3）从ResourceOwner中移出资源跟踪，函数ResourceOwnerForgetBuffer
	
	

	
	
	
	
	